{"version":3,"sources":["images/ImageNotFound.jpg","components/ShakaMoviePlayer/ShakaMoviePlayer.js","components/MovieInfoWindow/MovieInfoWindow.js","context/MovieTileContext.js","components/MovieTile/MovieTile.js","components/MovieCarousel/MovieCarousel.js","hooks/http.js","pages/MainPage.js","pages/SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","shaka","require","ShakaMoviePlayer","props","window","muxjs","videoComponent","React","createRef","videoContainer","onErrorEvent","bind","onError","event","this","detail","error","console","code","video","current","player","Player","ui","Overlay","configure","seekBarColors","base","buffered","played","getControls","addEventListener","load","then","log","catch","className","ref","key","id","poster","PureComponent","MovieInfoWindow","MovieTitle","MoviePopularity","MovieLanguage","MovieOverview","data-testid","MovieTitleContext","createContext","MovieTileProvider","useState","tileStateId","setTileStateId","Provider","value","children","MovieTile","MovieImage","isLargeTile","setIsLargeTile","useContext","MovieImageURL","videoElementRef","useRef","useEffect","scrollIntoView","behavior","block","inline","smallTileContent","Fragment","src","MovieImageNotFound","alt","tabIndex","onClick","MovieCarousel","carouselTitle","fetchItems","fetchUrl","handleOnWheel","url","dependencies","fetchedData","setFetchedData","isLoading","setIsLoading","fetch","response","ok","Error","json","data","err","useHttp","isloading","loadedMovies","results","length","map","movie","original_title","original_name","poster_path","popularity","original_language","overview","content","total_results","onWheel","e","target","parentElement","scrollLeft","aria-label","MainPage","to","width","height","viewBox","fill","xmlns","d","stroke","SearchPage","searchedString","inputValue","setInputValue","isSearching","setIsSearching","searchUrl","setSearchUrl","contentCarousel","onSubmit","preventDefault","split","join","placeholder","onChange","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a6439a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ImageNotFound.70a7c7f3.jpg\";","import React from 'react';\r\n\r\n/* \r\n* Library for transmuxing TS to MP4 for browsers. MPEG2-TS streams are not allways supported. \r\n*/\r\nimport muxjs from \"mux.js\";\r\n\r\n//Import Styles \r\nimport 'shaka-player/dist/controls.css';\r\n//Import Styles for Shaka Player UI Customization\r\nimport '../../styles/ShakaPlayer';\r\n//Import ShakaPlayer JS\r\nconst shaka = require('shaka-player/dist/shaka-player.ui.js');\r\n\r\n/**\r\n * Shaka Movie Player component with hardcoded HLS stream adress. Consists of Big Play Button, Mute, Fullscreen and Track Bar. \r\n * Using custom styles and Muxjs\r\n */\r\nclass ShakaMoviePlayer extends React.PureComponent{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t//Assigning muxi to global environment\r\n\t\twindow.muxjs = muxjs;\r\n\r\n\t\t//Creating reference to store video component\r\n\t\tthis.videoComponent = React.createRef();\r\n\r\n\t\t//Creating reference to store video container\r\n\t\tthis.videoContainer = React.createRef();\r\n\r\n\t\t//Initializing reference to error handlers\r\n\t\tthis.onErrorEvent = this.onErrorEvent.bind(this);\r\n\t\tthis.onError = this.onError.bind(this);\r\n\t}\r\n\r\n\tonErrorEvent(event) {\r\n\t  // Extract the shaka.util.Error object from the event.\r\n\t  this.onError(event.detail);\r\n\t}\r\n\r\n\tonError(error) {\r\n\t  // Log the error.\r\n\t  console.error('Error code', error.code, 'object', error);\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t//Link to HLS stream\r\n\t\tvar manifestUri = 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8';\r\n\r\n\t\t//Getting reference to video and video container\r\n\t\tconst video = this.videoComponent.current;\r\n\t\tconst videoContainer = this.videoContainer.current;\r\n\r\n\t\t//Initialize shaka player\r\n\t\tvar player = new shaka.Player(video);\r\n\r\n\t\t//Setting UI configuration with custom seekBar collors and control panel elements\r\n\t\tconst uiConfig = {\r\n            seekBarColors: {\r\n                base: 'rgba(0, 0, 0, 0.1)',\r\n                buffered: 'rgba(0, 0, 0, 0.3)',\r\n                played: '#c202d4',\r\n            },\r\n            'controlPanelElements': ['spacer','mute', 'fullscreen']\r\n        };\r\n\t\t  \r\n\t\t//Setting up shaka player UI\r\n      \tconst ui = new shaka.ui.Overlay(player, videoContainer, video);\r\n\r\n        ui.configure(uiConfig);\r\n      \tui.getControls();\r\n\r\n\t\t// Listen for error events.\r\n  \t\tplayer.addEventListener('error', this.onErrorEvent);\r\n\r\n  \t\t// Try to load a manifest.\r\n\t  \t// This is an asynchronous process.\r\n\t  \tplayer.load(manifestUri).then(function() {\r\n\t\t    // This runs if loading is successful.\r\n\t\t    console.log('The video has now been loaded!');\r\n\t  \t}).catch(this.onError);  // onError is executed if loading fails.\r\n\r\n\t}\r\n\r\n\trender(){\r\n\r\n\t\t/*\r\n\t\t* Returning video with a container. \r\n\t\t*/\r\n\t\t\r\n\t\treturn(\r\n\t\t\t<div \r\n\t\t\tclassName=\"movie-player\" \r\n\t\t\tref={this.videoContainer}\r\n\t\t\tkey={this.props.id + \"Shaka-Player\"}\r\n\t\t\t>\r\n\t\t\t\t<video \r\n\t\t\t\t\tclassName=\"shaka-video\"\r\n\t\t\t\t\tref={this.videoComponent}\r\n\t\t\t\t\tposter=\"\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ShakaMoviePlayer;","import React from 'react'\r\n\r\n//Import components\r\nimport ShakaMoviePlayer from '../ShakaMoviePlayer/ShakaMoviePlayer'\r\n\r\n//Import styles\r\nimport '../../styles/MovieInfoWindow'\r\n\r\n/**\r\n * Movie Info Window is component that provides user with additional information about the selected Movie. \r\n * It consists of Header, Popularity, Language, Overview and Trailer - played with Shaka Player.\r\n */\r\nconst MovieInfoWindow = ({ MovieTitle, MoviePopularity, MovieLanguage, MovieOverview, id }) => {\r\n\r\n    let content = [\r\n        //Movie Name\r\n        <h1\r\n            className=\"movie-carousel__info-window__header\"\r\n            data-testid=\"MovieInfoWindowHeaderTest\"\r\n            key={id + \" header\"}\r\n        >{MovieTitle}\r\n        </h1>,\r\n\r\n        //Movie Popularity with style span\r\n        <div\r\n            className=\"movie-carousel__info-window__popularity\"\r\n            key={id + \" popularity\"}\r\n        >Popularity: <span className=\"movie-carousel__info-window__span--purple\">{MoviePopularity}</span>\r\n        </div>,\r\n\r\n        //Movie Language\r\n        <p\r\n            className=\"movie-carousel__info-window__language\"\r\n            key={id + \" language\"}\r\n        >Language: {MovieLanguage}</p>,\r\n\r\n        //Movie Overview\r\n        <p\r\n            className=\"movie-carousel__info-window__overview\"\r\n            key={id + \" overview\"}\r\n        >Overview: {MovieOverview}</p>,\r\n\r\n        //Shaka Player Component\r\n        <ShakaMoviePlayer id={id + \" Shaka Player\"} key={id + \" Shaka Player\"}></ShakaMoviePlayer>\r\n    ]\r\n\r\n    //Returning Content\r\n    return content;\r\n}\r\n\r\nexport default MovieInfoWindow;","import React, { useState, createContext } from 'react';\r\n\r\n//Context with default values - needed for Jest Unit Testing\r\nexport const MovieTitleContext = createContext([{}, function() {}]);\r\n\r\n//Movie Tile Provider with Global State containing Movie Title ID that is currently active\r\nexport const MovieTileProvider = (props) => {\r\n    const [tileStateId, setTileStateId] = useState(null);\r\n\r\n\r\n    return(\r\n        <MovieTitleContext.Provider value={[tileStateId, setTileStateId]} key={\"MovieTitleContext\"}>\r\n            {props.children}\r\n        </MovieTitleContext.Provider>\r\n    );\r\n}","import React, { useState, useEffect, useRef, useContext } from 'react'\r\n\r\n//Importing Components\r\nimport MovieInfoWindow from '../MovieInfoWindow/MovieInfoWindow';\r\n\r\n//Importing Context\r\nimport { MovieTitleContext } from '../../context/MovieTileContext';\r\n\r\n//Importing Image\r\nimport MovieImageNotFound from '../../images/ImageNotFound.jpg'\r\n\r\n//Importing Styles\r\nimport '../../styles/MovieTile'\r\n\r\n/**\r\n * Movie Tile component displays movie posters with a popularity raiting. On hover you can see Movie Title. \r\n * Movie Tile should on click: scroll into view and enlarge itself into Movie Info Window. It should be able\r\n * to close other current opened Movie Info Window in its process. \r\n */\r\nconst MovieTile = ({ MovieTitle, MoviePopularity, MovieImage, MovieLanguage, MovieOverview, id }) => {\r\n\r\n    //Hook for large window indicator \r\n    const [isLargeTile, setIsLargeTile] = useState(false);\r\n    //Context for current active Movie Tile ID\r\n    const [tileStateId, setTileStateId] = useContext(MovieTitleContext);\r\n\r\n    //URL for Movie Tile - using fetched data and tmdb.org url with movie posters\r\n    const MovieImageURL = `https://image.tmdb.org/t/p/w600_and_h900_bestv2${MovieImage}`;\r\n\r\n\r\n    const videoElementRef = useRef(null);\r\n\r\n    //Logic to after click scroll enlarged tile into view only after the isLargeTile is changed to true\r\n    useEffect(() => {\r\n        if (videoElementRef && isLargeTile) {\r\n            videoElementRef.current.scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'center',\r\n                inline: 'center'\r\n            });\r\n        }\r\n    }, [isLargeTile])\r\n\r\n    /* \r\n    * Logic to close enlarged Movie Tile after clicking on another Tile\r\n    * handle compares Stored Tile ID (tileStateId) with Current Tile Id (given in props)\r\n    */\r\n    const handleOnClick = () => {\r\n        if (tileStateId !== id) {\r\n            //First tile to be clicked\r\n            setIsLargeTile(true);\r\n            setTileStateId(id);\r\n        } else if (tileStateId === id) {\r\n            //Clicking on same Tile\r\n            return\r\n        } else {\r\n            //Clicking on different Tile -> close current tile and reset state\r\n            setTileStateId(null);\r\n            setIsLargeTile(false);\r\n        }\r\n    }\r\n\r\n    //Content for regular Tile\r\n    let smallTileContent = (\r\n        <React.Fragment>\r\n            <img className=\"movie-carousel__tile__poster\"\r\n\r\n                //If image is not avalible, a backup imamge will be provided\r\n                src={MovieImage ? MovieImageURL : MovieImageNotFound}\r\n                alt=\"Movie Poster\"\r\n                tabIndex={0}\r\n                data-testid=\"MovieTilePosterTest\"\r\n            ></img>\r\n            <h2 className=\"movie-carousel__tile__name\" data-testid=\"MovieTileNameTest\" > {MovieTitle}</h2>\r\n            <p className=\"movie-carousel__tile__popularity\" data-testid=\"MovieTilePopularityTest\"> {MoviePopularity} </p>\r\n        </React.Fragment>\r\n    )\r\n\r\n    let content = (\r\n        //Wrapper around Tile that can adjust size\r\n        <div\r\n            className={(isLargeTile && tileStateId === id) ? \"movie-carousel__info-window\" : \"movie-carousel__tile\"}\r\n            onClick={handleOnClick}\r\n            ref={videoElementRef}\r\n        >\r\n            {\r\n                //Rendering either regular Tile or Movie Info Window\r\n                !(isLargeTile && tileStateId === id) ?\r\n                    smallTileContent :\r\n                    <MovieInfoWindow\r\n                        MovieTitle={MovieTitle}\r\n                        MoviePopularity={MoviePopularity}\r\n                        MovieImageURL={MovieImageURL}\r\n                        MovieLanguage={MovieLanguage}\r\n                        MovieOverview={MovieOverview}\r\n\r\n                        id={id + \" Info Window\"}\r\n                        key={id + \" Info Window\"}\r\n                    ></MovieInfoWindow>\r\n            }\r\n        </div>\r\n    );\r\n\r\n    //Returning Content\r\n    return content;\r\n}\r\n\r\nexport default MovieTile;","import React from 'react'\r\n\r\n//Importing Comoponents\r\nimport MovieTile from '../MovieTile'\r\n\r\n//Importing Styles\r\nimport '../../styles/MovieCarousel'\r\n\r\n//Importing Hooks\r\nimport { useHttp } from '../../hooks/http'\r\n\r\n/* \r\n* A Carousel component is filled with \"Movie Tiles\". Horizontal scroll is done by direction buttons. \r\n* Amount of Movies displayed is determined by 'fetchItems' value.\r\n*/\r\nconst MovieCarousel = ({ carouselTitle, fetchItems, fetchUrl, handleOnWheel , id}) => {\r\n\r\n    //Hook for initial Fetch of data and storage \r\n    const [isloading, fetchedData] = useHttp(\r\n        fetchUrl, []\r\n    )\r\n\r\n    // Initial value for loaded movies\r\n    let loadedMovies = null;\r\n    // Logic for populating loadedMovies var. by Movie Tiles with fetched data\r\n    if (fetchedData) {\r\n\r\n        //fetchedData has movie results stored in fetchedData.results \r\n        const data = fetchedData.results;\r\n        \r\n        //Cutting results arr with length given in comp. props else list all movies\r\n        if(fetchItems){\r\n            data.length= fetchItems;\r\n        }\r\n        //Mapping over fetchedData and storing MovieTitles into loadedMovies\r\n        loadedMovies = data.map(movie => {\r\n            return (\r\n                <MovieTile\r\n                    /*\r\n                    MovieTitle will store either \"Movie Name\" or \"Show Name\" due to difference\r\n                    in provided data from TheMovieDB  \r\n                    */\r\n                    MovieTitle={movie.original_title ? movie.original_title : movie.original_name}\r\n                    MovieImage={movie.poster_path}\r\n                    MoviePopularity={movie.popularity}\r\n                    MovieLanguage={movie.original_language}\r\n                    MovieOverview={movie.overview}\r\n\r\n                    id={movie.id + \" \" + carouselTitle}\r\n                    key={movie.id + \" \" + carouselTitle}\r\n                ></MovieTile>\r\n            )\r\n        })\r\n    }\r\n\r\n    //Content\r\n    let content = <p className=\"movie-carousel\" key={id + \" Loading\"}>Loading Movies...</p>;\r\n\r\n    //If statement for possibilities of invalid or empty search values\r\n    if(!isloading && (!fetchedData || fetchedData.total_results === 0)){\r\n        content = <h1 className=\"movie-carousel__error-title\">No Movies Found</h1>\r\n    }\r\n    //If data are loaded and loadedMovies are not emplty, then list of MovieTiles will be displayed\r\n    else if (!isloading && loadedMovies) {\r\n        content = [\r\n            <h2 className = \"movie-carousel__title\" key={id + \" Title\"}>{carouselTitle}</h2>,\r\n\r\n            <div\r\n                className=\"movie-carousel\"\r\n                onWheel={handleOnWheel}\r\n                tabIndex={0}\r\n                key={id + \" Wrapper\"}\r\n            >\r\n                <button\r\n                    className=\"movie-carousel__button movie-carousel__button--left\"\r\n                    onClick = {e => e.target.parentElement.scrollLeft -=450}\r\n                    aria-label='Move To Left'\r\n                    key={id + \" Left\"}\r\n                >{\"<\"}</button>\r\n\r\n                {loadedMovies}\r\n\r\n                <button\r\n                    className=\"movie-carousel__button movie-carousel__button--right\"\r\n                    onClick = {e => e.target.parentElement.scrollLeft +=450}\r\n                    aria-label='Move To Right'\r\n                    key={id + \" Right\"}\r\n                >{\">\"}</button>\r\n            </div>\r\n        ]\r\n    } else if (!isloading && !loadedMovies) {\r\n        //If data are no longer loading yet loadedMovies are empty err will be shown\r\n        content = <p className=\"movie-carousel\" key={id+\" Failed to fetch character\"}>Failed to fetch character.</p>;\r\n    }\r\n\r\n\r\n    //Returning Content\r\n    return content;\r\n\r\n}\r\n\r\nexport default MovieCarousel;","import { useState, useEffect } from 'react';\r\n/**\r\n * Custom Fetch Hook using Fetch API. Returns Fetched Data and Loading Status.\r\n */\r\nexport const useHttp = (url, dependencies) => {\r\n    //Hooks for Fetched Data and Loading boolean\r\n    const [fetchedData, setFetchedData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        //Setting Loading status to true\r\n        setIsLoading(true);\r\n\r\n        console.log('Sending Http request to URL: ' + url);\r\n\r\n        //Fetch Api Fetching Data from URL argument\r\n        fetch(url)\r\n        .then(response => {\r\n            if(!response.ok){\r\n                throw new Error(\"Failed to fetch\");\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(data=> {\r\n            //Setting Loading status to false\r\n            setIsLoading(false);\r\n            //Storing Fetched Data to fetchedData state\r\n            setFetchedData(data);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            setIsLoading(false);\r\n        })\r\n    }, dependencies)\r\n\r\n    return [isLoading, fetchedData]\r\n}","import React from 'react'\r\n\r\n//Importing Components\r\nimport MovieCarousel from \"../components/MovieCarousel\"\r\n\r\n//Importing Styles\r\nimport '../styles/MainPage';\r\n\r\n//Import link from Router-DOM\r\nimport { Link } from 'react-router-dom';\r\n\r\n/**\r\n* Main Page: Consists of Main Title and Movie Carousel Components. Here are stored variables of Fetch URLs.\r\n*/\r\nconst MainPage = () => {\r\n\r\n    // Variables with URLs\r\n    const PopularMoviesUrl = \"https://api.themoviedb.org/3/discover/movie?api_key=98ce4db000fae9862ed2b07152868c56&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=true&page=1\";\r\n    const PupularTvShowsUrl = \"https://api.themoviedb.org/3/tv/popular?api_key=98ce4db000fae9862ed2b07152868c56&language=en-US&page=1\";\r\n\r\n    return [\r\n        <div className=\"main-page-header\" key=\"MainPageTitle\">\r\n            <h1 className=\"main-page__title\">Movie_DB</h1>\r\n    \r\n        <Link to=\"/search\">\r\n                <svg className=\"search-icon\" width=\"149\" height=\"50\" viewBox=\"0 0 149 150\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M109.621 96.2122L109.369 96.5577L109.671 96.8598L148.099 135.288L134.094 149.293L95.4598 110.659L95.1663 110.365L94.8237 110.6C85.129 117.239 73.4206 121.125 60.8125 121.125C27.5574 121.125 0.5 94.0738 0.5 60.8125C0.5 27.5574 27.5574 0.5 60.8125 0.5C94.0739 0.5 121.131 27.5574 121.131 60.8125C121.131 74.0279 116.855 86.2632 109.621 96.2122ZM60.8187 17.3312C36.8426 17.3312 17.3375 36.8364 17.3375 60.8125C17.3375 84.7886 36.8363 104.294 60.8187 104.294C84.7949 104.294 104.3 84.7886 104.3 60.8125C104.3 36.8364 84.7949 17.3312 60.8187 17.3312Z\" fill=\"white\" stroke=\"black\" />\r\n                </svg>\r\n            </Link>\r\n        </div>,\r\n\r\n        <MovieCarousel\r\n            carouselTitle=\"Popular Movies\"\r\n            fetchItems={8}\r\n            fetchUrl={PopularMoviesUrl}\r\n            key=\"PopularMoviesCarousel\"\r\n            id=\"PopularMoviesCarousel\"\r\n        ></MovieCarousel>,\r\n\r\n        <MovieCarousel\r\n            carouselTitle=\"Popular TV Shows\"\r\n            fetchItems={15}\r\n            fetchUrl={PupularTvShowsUrl}\r\n            key=\"PopularTvShowsCarousel\"\r\n            id=\"PopularMoviesCarousel\"\r\n        ></MovieCarousel>,\r\n    ];\r\n}\r\n\r\nexport default MainPage;","import React, { useState } from 'react'\r\n\r\n//Importing Styles\r\nimport '../styles/SearchPage';\r\n\r\n//Import link from Router-DOM\r\nimport { Link } from 'react-router-dom';\r\n\r\n//Import Component\r\nimport MovieCarousel from '../components/MovieCarousel';\r\n\r\n/**\r\n* Search Page: Consists of Search Bar, Home Link and MovieCarousel to display searched Movie\r\n*/\r\nconst SearchPage = () => {\r\n    //Initial searched string value\r\n    let searchedString = \"\";\r\n\r\n    // Hook for Value from Input\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    // Hook for isSearching bool that helps rerender the Movie Carousel Component with search result\r\n    const [isSearching, setIsSearching] = useState(false);\r\n    // Hook for fetched url with Searched Query\r\n    const [searchUrl, setSearchUrl] = useState(`https://api.themoviedb.org/3/search/movie?api_key=98ce4db000fae9862ed2b07152868c56&query=`);\r\n\r\n    // On submit handle that managest users query value and mutates search url\r\n    const handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        // Spliting searched query string by space and joining with + -> \"Red Ruby\" = \"Red+Ruby\"\r\n        searchedString = inputValue.split(' ').join('+');\r\n        // Inserting searched query into Search URL\r\n        setSearchUrl(`https://api.themoviedb.org/3/search/movie?api_key=98ce4db000fae9862ed2b07152868c56&query=${searchedString}`);\r\n        // Apply isSearching = true for needed re-render of MovieCarousel with result movies\r\n        setIsSearching(true);\r\n    }\r\n\r\n    // On change handle to store current value in index into state as imputValue\r\n    const handleOnChange = (e) => {\r\n        e.preventDefault();\r\n        setIsSearching(false);\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    // Defining a content with Movie Carousel Component\r\n    let contentCarousel =\r\n        <MovieCarousel\r\n            carouselTitle=\"Searched Movies\"\r\n            fetchUrl={searchUrl}\r\n            key=\"Searched Movies\"\r\n            id=\"Searched Movies\"\r\n        ></MovieCarousel>;\r\n\r\n    // Defining empty content\r\n    let content = <div></div>\r\n\r\n    return [\r\n        //Custom Link to navigate back to Home Page\r\n        <div key=\"SearchPage-HomeLink\" className=\"link-wrapper link-wrapper--with-margin\">\r\n            <Link to=\"/\">\r\n                <h1 className=\"custom-underline \">HOME</h1>\r\n            </Link>\r\n        </div>,\r\n\r\n        //Form with Search Bar\r\n        <form key=\"SearchPage-Form\" onSubmit={handleOnSubmit} className=\"search-form\">\r\n            <input\r\n                placeholder=\"Search For A Movie\"\r\n                onChange={handleOnChange}\r\n                className=\"search-input\"\r\n            ></input>\r\n        </form>,\r\n\r\n        //If user is not searching than Empty context is rendered\r\n        <div  key=\"SearchPage-EmptyContent\">{!isSearching ? content : contentCarousel}</div>\r\n    ];\r\n}\r\n\r\nexport default SearchPage;","import React from 'react';\r\n// Import Component\r\nimport MainPage from './pages/MainPage';\r\nimport SearchPage from './pages/SearchPage';\r\n// Import Context \r\nimport { MovieTileProvider } from './context/MovieTileContext';\r\n//Import Router\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\n\r\n/**\r\n * App showing data from themoviedb.org via API\r\n * Contains: Carousell, Movie Tiles, Movie Info Windows, Shaka Player, SearchPage\r\n * Technology: Mainly are used Funcional Components with hooks and for Movie Tiles is \r\n * set up Movie Tile Context providin ID of current active Movie Tile.\r\n * For Route there is used \"process.env.PUBLIC_URL\" so it works in developpement as well as in GitHub-Pages\r\n */\r\nfunction App() {\r\n  return (   \r\n    <Router>\r\n      <Switch>\r\n        <MovieTileProvider key={\"MovieTileProvider\"}>\r\n        \r\n          <Route path=\"https://jirijancik.github.io/react-movie-db/\" exact component={MainPage} />\r\n          <Route path=\"https://jirijancik.github.io/search\" component={SearchPage} />\r\n\r\n        </MovieTileProvider>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n//Importing styles\r\nimport './styles/Index'\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App key = \"yeeeeeeerewrer\" />, document.getElementById('root'));\r\n\r\n//Service worker\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}